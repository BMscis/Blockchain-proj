/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "set_members(address,address,address,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "contribute(pay,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "request_loan(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSAyIDMKYnl0ZWNibG9jayAweCAweDYxNzMgMHg2MTczMzIgMHg2MTczMzMgMHg2MTczMzQgMHg2MTYyIDB4NjE2NCAweDYxNjIzMiAweDYxNjIzMyAweDYxNjIzNCAweDE1MWY3Yzc1IDB4NjE2NDMyIDB4NjE2NDMzCnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2w4CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4YTM5MDQ2NmYgLy8gInNldF9tZW1iZXJzKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpdWludDY0Igo9PQpibnogbWFpbl9sNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDVhNGIwMmU5IC8vICJjb250cmlidXRlKHBheSx1aW50NjQpdWludDY0Igo9PQpibnogbWFpbl9sNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDgxOTRiMmI0IC8vICJyZXF1ZXN0X2xvYW4odWludDY0LHVpbnQ2NCl1aW50NjQiCj09CmJueiBtYWluX2w1CmVycgptYWluX2w1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHJlcXVlc3Rsb2FuY2FzdGVyXzIxCmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNvbnRyaWJ1dGVjYXN0ZXJfMjAKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDc6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgc2V0bWVtYmVyc2Nhc3Rlcl8xOQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTAKZXJyCm1haW5fbDEwOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBhZGRfZnVuZHMKYWRkZnVuZHNfMDoKcHJvdG8gMiAwCmZyYW1lX2RpZyAtMQppbnRjXzEgLy8gMQo9PQpibnogYWRkZnVuZHNfMF9sNwpmcmFtZV9kaWcgLTEKaW50Y18yIC8vIDIKPT0KYm56IGFkZGZ1bmRzXzBfbDYKZnJhbWVfZGlnIC0xCmludGNfMyAvLyAzCj09CmJueiBhZGRmdW5kc18wX2w1CmZyYW1lX2RpZyAtMQpwdXNoaW50IDQgLy8gNAo9PQpieiBhZGRmdW5kc18wX2w4CmZyYW1lX2RpZyAtMgpjYWxsc3ViIGFkZG1lbWJlcjRfNApiIGFkZGZ1bmRzXzBfbDgKYWRkZnVuZHNfMF9sNToKZnJhbWVfZGlnIC0yCmNhbGxzdWIgYWRkbWVtYmVyM18zCmIgYWRkZnVuZHNfMF9sOAphZGRmdW5kc18wX2w2OgpmcmFtZV9kaWcgLTIKY2FsbHN1YiBhZGRtZW1iZXIyXzIKYiBhZGRmdW5kc18wX2w4CmFkZGZ1bmRzXzBfbDc6CmZyYW1lX2RpZyAtMgpjYWxsc3ViIGFkZG1lbWJlcjFfMQphZGRmdW5kc18wX2w4OgpyZXRzdWIKCi8vIGFkZF9tZW1iZXJfMQphZGRtZW1iZXIxXzE6CnByb3RvIDEgMAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMSAvLyAiYXMiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTEKKwpmcmFtZV9idXJ5IDEKYnl0ZWNfMSAvLyAiYXMiCmZyYW1lX2RpZyAxCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gYWRkX21lbWJlcl8yCmFkZG1lbWJlcjJfMjoKcHJvdG8gMSAwCmludGNfMCAvLyAwCmR1cApieXRlY18yIC8vICJhczIiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTEKKwpmcmFtZV9idXJ5IDEKYnl0ZWNfMiAvLyAiYXMyIgpmcmFtZV9kaWcgMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGFkZF9tZW1iZXJfMwphZGRtZW1iZXIzXzM6CnByb3RvIDEgMAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMyAvLyAiYXMzIgphcHBfZ2xvYmFsX2dldApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIC0xCisKZnJhbWVfYnVyeSAxCmJ5dGVjXzMgLy8gImFzMyIKZnJhbWVfZGlnIDEKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBhZGRfbWVtYmVyXzQKYWRkbWVtYmVyNF80Ogpwcm90byAxIDAKaW50Y18wIC8vIDAKZHVwCmJ5dGVjIDQgLy8gImFzNCIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAtMQorCmZyYW1lX2J1cnkgMQpieXRlYyA0IC8vICJhczQiCmZyYW1lX2RpZyAxCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gcHJvY2Vzc19sb2FuCnByb2Nlc3Nsb2FuXzU6CnByb3RvIDIgMApmcmFtZV9kaWcgLTIKaW50Y18xIC8vIDEKPT0KYm56IHByb2Nlc3Nsb2FuXzVfbDcKZnJhbWVfZGlnIC0yCmludGNfMiAvLyAyCj09CmJueiBwcm9jZXNzbG9hbl81X2w2CmZyYW1lX2RpZyAtMgppbnRjXzMgLy8gMwo9PQpibnogcHJvY2Vzc2xvYW5fNV9sNQpmcmFtZV9kaWcgLTIKcHVzaGludCA0IC8vIDQKPT0KYnogcHJvY2Vzc2xvYW5fNV9sOApmcmFtZV9kaWcgLTEKY2FsbHN1YiBsZW5kbWVtYmVyNF85CmIgcHJvY2Vzc2xvYW5fNV9sOApwcm9jZXNzbG9hbl81X2w1OgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBsZW5kbWVtYmVyM184CmIgcHJvY2Vzc2xvYW5fNV9sOApwcm9jZXNzbG9hbl81X2w2OgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBsZW5kbWVtYmVyMl83CmIgcHJvY2Vzc2xvYW5fNV9sOApwcm9jZXNzbG9hbl81X2w3OgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBsZW5kbWVtYmVyMV82CnByb2Nlc3Nsb2FuXzVfbDg6CnJldHN1YgoKLy8gbGVuZF9tZW1iZXJfMQpsZW5kbWVtYmVyMV82Ogpwcm90byAxIDAKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzAgLy8gIiIKYnl0ZWMgNSAvLyAiYWIiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTEKKwpmcmFtZV9idXJ5IDEKYnl0ZWMgNiAvLyAiYWQiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMgpsZW4KcHVzaGludCAzMiAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIC0xCmNhbGxzdWIgZG9heGZlcl8xMApieXRlYyA1IC8vICJhYiIKZnJhbWVfZGlnIDEKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBsZW5kX21lbWJlcl8yCmxlbmRtZW1iZXIyXzc6CnByb3RvIDEgMAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpieXRlYyA3IC8vICJhYjIiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTEKKwpmcmFtZV9idXJ5IDEKYnl0ZWMgMTEgLy8gImFkMiIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAyCmxlbgpwdXNoaW50IDMyIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgMgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBkb2F4ZmVyXzEwCmJ5dGVjIDcgLy8gImFiMiIKZnJhbWVfZGlnIDEKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBsZW5kX21lbWJlcl8zCmxlbmRtZW1iZXIzXzg6CnByb3RvIDEgMAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpieXRlYyA4IC8vICJhYjMiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTEKKwpmcmFtZV9idXJ5IDEKYnl0ZWMgMTIgLy8gImFkMyIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAyCmxlbgpwdXNoaW50IDMyIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgMgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBkb2F4ZmVyXzEwCmJ5dGVjIDggLy8gImFiMyIKZnJhbWVfZGlnIDEKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBsZW5kX21lbWJlcl80CmxlbmRtZW1iZXI0Xzk6CnByb3RvIDEgMAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpieXRlYyA5IC8vICJhYjQiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTEKKwpmcmFtZV9idXJ5IDEKYnl0ZWMgNiAvLyAiYWQiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMgpsZW4KcHVzaGludCAzMiAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIC0xCmNhbGxzdWIgZG9heGZlcl8xMApieXRlYyA5IC8vICJhYjQiCmZyYW1lX2RpZyAxCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gZG9fYXhmZXIKZG9heGZlcl8xMDoKcHJvdG8gMiAwCml0eG5fYmVnaW4KaW50Y18xIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIEFtb3VudApmcmFtZV9kaWcgLTIKaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCmludGNfMCAvLyAwCml0eG5fZmllbGQgRmVlCmdsb2JhbCBaZXJvQWRkcmVzcwppdHhuX2ZpZWxkIEFzc2V0Q2xvc2VUbwpnbG9iYWwgWmVyb0FkZHJlc3MKaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCmdsb2JhbCBaZXJvQWRkcmVzcwppdHhuX2ZpZWxkIFJla2V5VG8KcHVzaGJ5dGVzIDB4NTM2NTcyNzY2OTYzNjUyMDZjNmY2MTZlMjAgLy8gIlNlcnZpY2UgbG9hbiAiCml0eG5fZmllbGQgTm90ZQppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHNldF9tZW1iZXJfaW5pdApzZXRtZW1iZXJpbml0XzExOgpwcm90byAyIDAKZnJhbWVfZGlnIC0xCmludGNfMSAvLyAxCj09CmJueiBzZXRtZW1iZXJpbml0XzExX2w3CmZyYW1lX2RpZyAtMQppbnRjXzIgLy8gMgo9PQpibnogc2V0bWVtYmVyaW5pdF8xMV9sNgpmcmFtZV9kaWcgLTEKaW50Y18zIC8vIDMKPT0KYm56IHNldG1lbWJlcmluaXRfMTFfbDUKZnJhbWVfZGlnIC0xCnB1c2hpbnQgNCAvLyA0Cj09CmJ6IHNldG1lbWJlcmluaXRfMTFfbDgKZnJhbWVfZGlnIC0yCmNhbGxzdWIgc2V0aW5pdG1lbWJlcjRfMTUKYiBzZXRtZW1iZXJpbml0XzExX2w4CnNldG1lbWJlcmluaXRfMTFfbDU6CmZyYW1lX2RpZyAtMgpjYWxsc3ViIHNldGluaXRtZW1iZXIzXzE0CmIgc2V0bWVtYmVyaW5pdF8xMV9sOApzZXRtZW1iZXJpbml0XzExX2w2OgpmcmFtZV9kaWcgLTIKY2FsbHN1YiBzZXRpbml0bWVtYmVyMl8xMwpiIHNldG1lbWJlcmluaXRfMTFfbDgKc2V0bWVtYmVyaW5pdF8xMV9sNzoKZnJhbWVfZGlnIC0yCmNhbGxzdWIgc2V0aW5pdG1lbWJlcjFfMTIKc2V0bWVtYmVyaW5pdF8xMV9sODoKcmV0c3ViCgovLyBzZXRfaW5pdF9tZW1iZXIxCnNldGluaXRtZW1iZXIxXzEyOgpwcm90byAxIDAKYnl0ZWMgNiAvLyAiYWQiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApieXRlYyA1IC8vICJhYiIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAiYXMiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gc2V0X2luaXRfbWVtYmVyMgpzZXRpbml0bWVtYmVyMl8xMzoKcHJvdG8gMSAwCmJ5dGVjIDExIC8vICJhZDIiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApieXRlYyA3IC8vICJhYjIiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzIgLy8gImFzMiIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBzZXRfaW5pdF9tZW1iZXIzCnNldGluaXRtZW1iZXIzXzE0Ogpwcm90byAxIDAKYnl0ZWMgMTIgLy8gImFkMyIKZnJhbWVfZGlnIC0xCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDggLy8gImFiMyIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMyAvLyAiYXMzIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHNldF9pbml0X21lbWJlcjQKc2V0aW5pdG1lbWJlcjRfMTU6CnByb3RvIDEgMApwdXNoYnl0ZXMgMHg2MTY0MzQgLy8gImFkNCIKZnJhbWVfZGlnIC0xCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDkgLy8gImFiNCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNCAvLyAiYXM0IgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHNldF9tZW1iZXJzCnNldG1lbWJlcnNfMTY6CnByb3RvIDQgMQppbnRjXzAgLy8gMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmZyYW1lX2RpZyAtNAppbnRjXzEgLy8gMQpjYWxsc3ViIHNldG1lbWJlcmluaXRfMTEKZnJhbWVfZGlnIC0zCmludGNfMiAvLyAyCmNhbGxzdWIgc2V0bWVtYmVyaW5pdF8xMQpmcmFtZV9kaWcgLTIKaW50Y18zIC8vIDMKY2FsbHN1YiBzZXRtZW1iZXJpbml0XzExCmZyYW1lX2RpZyAtMQpwdXNoaW50IDQgLy8gNApjYWxsc3ViIHNldG1lbWJlcmluaXRfMTEKcHVzaGJ5dGVzIDB4NjcgLy8gImciCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwphcHBfZ2xvYmFsX3B1dAppbnRjXzEgLy8gMQpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjb250cmlidXRlCmNvbnRyaWJ1dGVfMTc6CnByb3RvIDIgMQppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTIKZ3R4bnMgQW1vdW50CmZyYW1lX2RpZyAtMQpjYWxsc3ViIGFkZGZ1bmRzXzAKaW50Y18xIC8vIDEKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gcmVxdWVzdF9sb2FuCnJlcXVlc3Rsb2FuXzE4Ogpwcm90byAyIDEKaW50Y18wIC8vIDAKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAtMgpjYWxsc3ViIHByb2Nlc3Nsb2FuXzUKaW50Y18xIC8vIDEKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gc2V0X21lbWJlcnNfY2FzdGVyCnNldG1lbWJlcnNjYXN0ZXJfMTk6CnByb3RvIDAgMAppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmR1cG4gMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmZyYW1lX2J1cnkgMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmZyYW1lX2J1cnkgMwp0eG5hIEFwcGxpY2F0aW9uQXJncyA0CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpmcmFtZV9kaWcgMwpmcmFtZV9kaWcgNApjYWxsc3ViIHNldG1lbWJlcnNfMTYKZnJhbWVfYnVyeSAwCmJ5dGVjIDEwIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKaXRvYgpjb25jYXQKbG9nCnJldHN1YgoKLy8gY29udHJpYnV0ZV9jYXN0ZXIKY29udHJpYnV0ZWNhc3Rlcl8yMDoKcHJvdG8gMCAwCmludGNfMCAvLyAwCmR1cG4gMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAyCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgY29udHJpYnV0ZV8xNwpmcmFtZV9idXJ5IDAKYnl0ZWMgMTAgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMAppdG9iCmNvbmNhdApsb2cKcmV0c3ViCgovLyByZXF1ZXN0X2xvYW5fY2FzdGVyCnJlcXVlc3Rsb2FuY2FzdGVyXzIxOgpwcm90byAwIDAKaW50Y18wIC8vIDAKZHVwbiAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHJlcXVlc3Rsb2FuXzE4CmZyYW1lX2J1cnkgMApieXRlYyAxMCAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCml0b2IKY29uY2F0CmxvZwpyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g",
          "descr": "The current governor of this contract, allowed to do admin type actions"
        },
        "member1": {
          "type": "bytes",
          "key": "ad",
          "descr": "Member A address"
        },
        "member1_loans": {
          "type": "uint64",
          "key": "ab",
          "descr": "Member A Loans"
        },
        "member1_savings": {
          "type": "uint64",
          "key": "as",
          "descr": "Member A Savings"
        },
        "member2": {
          "type": "bytes",
          "key": "ad2",
          "descr": "Member B address"
        },
        "member2_loans": {
          "type": "uint64",
          "key": "ab2",
          "descr": "Member B Loans"
        },
        "member2_savings": {
          "type": "uint64",
          "key": "as2",
          "descr": "Member B Savings"
        },
        "member3": {
          "type": "bytes",
          "key": "ad3",
          "descr": "Member C address"
        },
        "member3_loans": {
          "type": "uint64",
          "key": "ab3",
          "descr": "Member C Loans"
        },
        "member3_savings": {
          "type": "uint64",
          "key": "as3",
          "descr": "Member C Savings"
        },
        "member4": {
          "type": "bytes",
          "key": "ad4",
          "descr": "Member D address"
        },
        "member4_loans": {
          "type": "uint64",
          "key": "ab4",
          "descr": "Member D Loans"
        },
        "member4_savings": {
          "type": "uint64",
          "key": "as4",
          "descr": "Member D Savings"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "table_banking",
    "methods": [
      {
        "name": "set_members",
        "args": [
          {
            "type": "address",
            "name": "member_1"
          },
          {
            "type": "address",
            "name": "member_2"
          },
          {
            "type": "address",
            "name": "member_3"
          },
          {
            "type": "address",
            "name": "member_4"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "contribute",
        "args": [
          {
            "type": "pay",
            "name": "amount"
          },
          {
            "type": "uint64",
            "name": "member_number"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "request_loan",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "uint64",
            "name": "member_number"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "networks": {},
    "desc": "Table Banking demo"
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the TableBanking smart contract.
 */
export type TableBanking = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'set_members(address,address,address,address)uint64' | 'set_members', {
      argsObj: {
        member_1: string
        member_2: string
        member_3: string
        member_4: string
      }
      argsTuple: [member_1: string, member_2: string, member_3: string, member_4: string]
      returns: bigint
    }>
    & Record<'contribute(pay,uint64)uint64' | 'contribute', {
      argsObj: {
        amount: TransactionToSign | Transaction | Promise<SendTransactionResult>
        member_number: bigint | number
      }
      argsTuple: [amount: TransactionToSign | Transaction | Promise<SendTransactionResult>, member_number: bigint | number]
      returns: bigint
    }>
    & Record<'request_loan(uint64,uint64)uint64' | 'request_loan', {
      argsObj: {
        amount: bigint | number
        member_number: bigint | number
      }
      argsTuple: [amount: bigint | number, member_number: bigint | number]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * The current governor of this contract, allowed to do admin type actions
       */
      'g'?: BinaryState
      /**
       * Member A address
       */
      'ad'?: BinaryState
      /**
       * Member A Loans
       */
      'ab'?: IntegerState
      /**
       * Member A Savings
       */
      'as'?: IntegerState
      /**
       * Member B address
       */
      'ad2'?: BinaryState
      /**
       * Member B Loans
       */
      'ab2'?: IntegerState
      /**
       * Member B Savings
       */
      'as2'?: IntegerState
      /**
       * Member C address
       */
      'ad3'?: BinaryState
      /**
       * Member C Loans
       */
      'ab3'?: IntegerState
      /**
       * Member C Savings
       */
      'as3'?: IntegerState
      /**
       * Member D address
       */
      'ad4'?: BinaryState
      /**
       * Member D Loans
       */
      'ab4'?: IntegerState
      /**
       * Member D Savings
       */
      'as4'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type TableBankingSig = keyof TableBanking['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends TableBankingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the TableBanking smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends TableBankingSig> = TableBanking['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TableBanking smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TableBankingSig> = TableBanking['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type TableBankingCreateCalls = (typeof TableBankingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type TableBankingCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type TableBankingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: TableBankingCreateCalls) => TableBankingCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class TableBankingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the table_banking smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_members(address,address,address,address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMembers(args: MethodArgs<'set_members(address,address,address,address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_members(address,address,address,address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.member_1, args.member_2, args.member_3, args.member_4],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contribute(pay,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contribute(args: MethodArgs<'contribute(pay,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contribute(pay,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.member_number],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the request_loan(uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static requestLoan(args: MethodArgs<'request_loan(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'request_loan(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.member_number],
      ...params,
    }
  }
}

/**
 * A client to make calls to the table_banking smart contract
 */
export class TableBankingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `TableBankingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof TableBanking['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the table_banking smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: TableBankingDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(TableBankingCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the table_banking smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the table_banking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_members(address,address,address,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMembers(args: MethodArgs<'set_members(address,address,address,address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TableBankingCallFactory.setMembers(args, params))
  }

  /**
   * Calls the contribute(pay,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public contribute(args: MethodArgs<'contribute(pay,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TableBankingCallFactory.contribute(args, params))
  }

  /**
   * Calls the request_loan(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public requestLoan(args: MethodArgs<'request_loan(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TableBankingCallFactory.requestLoan(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<TableBanking['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get g() {
        return TableBankingClient.getBinaryState(state, 'g')
      },
      get ad() {
        return TableBankingClient.getBinaryState(state, 'ad')
      },
      get ab() {
        return TableBankingClient.getIntegerState(state, 'ab')
      },
      get as() {
        return TableBankingClient.getIntegerState(state, 'as')
      },
      get ad2() {
        return TableBankingClient.getBinaryState(state, 'ad2')
      },
      get ab2() {
        return TableBankingClient.getIntegerState(state, 'ab2')
      },
      get as2() {
        return TableBankingClient.getIntegerState(state, 'as2')
      },
      get ad3() {
        return TableBankingClient.getBinaryState(state, 'ad3')
      },
      get ab3() {
        return TableBankingClient.getIntegerState(state, 'ab3')
      },
      get as3() {
        return TableBankingClient.getIntegerState(state, 'as3')
      },
      get ad4() {
        return TableBankingClient.getBinaryState(state, 'ad4')
      },
      get ab4() {
        return TableBankingClient.getIntegerState(state, 'ab4')
      },
      get as4() {
        return TableBankingClient.getIntegerState(state, 'as4')
      },
    }
  }

  public compose(): TableBankingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setMembers(args: MethodArgs<'set_members(address,address,address,address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setMembers(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      contribute(args: MethodArgs<'contribute(pay,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contribute(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      requestLoan(args: MethodArgs<'request_loan(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.requestLoan(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as TableBankingComposer
  }
}
export type TableBankingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_members(address,address,address,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMembers(args: MethodArgs<'set_members(address,address,address,address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): TableBankingComposer<[...TReturns, MethodReturn<'set_members(address,address,address,address)uint64'>]>

  /**
   * Calls the contribute(pay,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contribute(args: MethodArgs<'contribute(pay,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): TableBankingComposer<[...TReturns, MethodReturn<'contribute(pay,uint64)uint64'>]>

  /**
   * Calls the request_loan(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestLoan(args: MethodArgs<'request_loan(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): TableBankingComposer<[...TReturns, MethodReturn<'request_loan(uint64,uint64)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the table_banking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): TableBankingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): TableBankingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<TableBankingComposerResults<TReturns>>
}
export type TableBankingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
